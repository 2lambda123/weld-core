<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>
<chapter id="configure">
   <title>Configuration</title>

   <section>
      <title>Excluding classes from scanning and deployment</title>

      <para>
         CDI 1.1 allows you to exclude classes in your archive from scanning, having
         container lifecycle events fired, and being deployed as beans. See also <ulink url="http://docs.jboss.org/cdi/spec/1.1/cdi-spec.html#bean_discovery">12.4. Bean discovery</ulink>.
      </para>

      <note>
         <para>
            Weld still supports the original non-portable way of excluding classes from discovery.
            The formal specification can be found in the
            xsd, located at <ulink url="http://jboss.org/schema/weld/beans_1_1.xsd">http://jboss.org/schema/weld/beans_1_1.xsd</ulink>.
            Unlike Weld, the CDI specification does not support regular expression patterns and <code>!</code> character to invert the
            activation condition.
         </para>
      </note>

      <para>All the configuration is done in the <filename>beans.xml</filename> file. For more information see <xref linkend="packaging"/>.</para>

      <example>
        <title>beans.xml</title>
      <programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://xmlns.jcp.org/xml/ns/javaee">

    <scan>

        <!-- Don't deploy the classes for the swing app! -->
        <exclude name="com.acme.swing.**" />

        <!-- Don't include GWT support if GWT is not installed -->
        <exclude name="com.acme.gwt.**">
            <if-class-not-available name="com.google.GWT"/>
        </exclude>

        <!--
            Exclude types from com.acme.verbose package if the system property verbosity is set to low
            i.e.
              java ... -Dverbosity=low
        -->
        <exclude name="com.acme.verbose.*">
            <if-system-property name="verbosity" value="low"/>
        </exclude>

        <!--
             Don't include JSF support if Wicket classes are present, and the viewlayer system
             property is set
        -->
        <exclude name="com.acme.jsf.**">
            <if-class-available name="org.apache.wicket.Wicket"/>
            <if-system-property name="viewlayer"/>
        </exclude>
    </scan>

</beans>]]></programlisting>
      </example>

      <para>
         In this example we show the most common use cases for exercising fine control over which classes
         Weld scans. The first filter excludes all types whose package name starts with <code>com.acme.swing</code>, and
         in most cases this will be sufficient for your needs.
      </para>

      <para>
         However, sometimes it's useful to be able to activate the filter depending on the environment used.
         In this case, Weld allows you to activate (or deactivate) a filter based on either system properties
         or whether a class is available. The second filter shows the use case of disabling scanning of certain
         classes depending on the capabilities of the environment you deploy to - in this case we are excluding
         GWT support (all types whose package name starts with <code>com.acme.gwt</code>) if GWT is not installed.
      </para>

      <note>
         <para>
            If you specify just a system property name, Weld will activate the filter if that system property
            has been set (with any value). If you also specify the system property value, then Weld will only
            activate the filter if the system property's value matches exactly.
         </para>
      </note>

      <para>
         The third filter shows how to exclude types from the specific package (note the name attribute has suffix ".*").
      </para>

      <para>
         The fourth filter shows more a advanced configurations, where we use multiple activation conditions to
         decide whether to activate the filter.
      </para>

      <para>
         You can combine as many activation conditions as you like (<emphasis>all</emphasis> must be true for the
         filter to be activated).
         If you want to a filter that is active if <emphasis>any</emphasis> of the activation conditions are true,
         then you need multiple identical filters, each with different activation conditions.
      </para>

   </section>
   <section>
      <title>Concurrent deployment configuration</title>
    <para>
        Weld by default supports concurrent loading and deploying of
        beans. However, in certain deployment scenarios the default
        setup may not be appropriate. Bootstrap configuration may be
        altered using the
        <filename>org.jboss.weld.bootstrap.properties</filename>
        file located on the classpath (e.g.
        <filename>WEB-INF/classes/org.jboss.weld.bootstrap.properties</filename>
        in a web archive).
    </para>

    <table id="bootstrap.configuration.table">
         <title>Concurrent deployment configuration options</title>
         <tgroup cols="3">
         <thead>
            <row>
               <entry>Configuration option</entry>
               <entry>Default value</entry>
               <entry>Description</entry>
            </row>
         </thead>
         <tbody>
            <row>
                <entry><literal>concurrentDeployment</literal></entry>
                <entry>true</entry>
                <entry>If set to false, <literal>ConcurrentDeployer</literal> and <literal>ConcurrentValidator</literal> will not be used.</entry>
            </row>
            <row>
                <entry><literal>preloaderThreadPoolSize</literal></entry>
                <entry><function>Math.max(1, Runtime.getRuntime().availableProcessors() - 1)</function></entry>
                <entry>Weld is capable of resolving observer methods for container
                    lifecycle events in advance while bean deployer threads are
                    blocked waiting for I/O operations (such as classloading). This
                    process is called preloading and leads to better CPU utilization
                    and faster application startup time. This configuration option
                    specifies the number of threads used for preloading. If set to
                    0, preloading is disabled.</entry>
            </row>
         </tbody>
         </tgroup>
    </table>

    <section>
        <title>Thread pool configuration</title>
        <para>
            For certain types of tasks Weld uses its own thread pool. The thread
            pool is represented by the
            <literal>ExecutorServices</literal>
            service. It is possible to alter the thread pool configuration in the
            <filename>WEB-INF/classes/org.jboss.weld.executor.properties</filename>
            file.
        </para>
        <table id="executor.configuration.table">
             <title>Executor configuration options</title>
             <tgroup cols="3">
             <thead>
                <row>
                   <entry>Configuration option</entry>
                   <entry>Default value</entry>
                   <entry>Description</entry>
                </row>
             </thead>
             <tbody>
                <row>
                    <entry><literal>debug</literal></entry>
                    <entry>false</entry>
                    <entry>If set to true, debug timing information is printed to the standard output.</entry>
                </row>
                <row>
                    <entry><literal>threadPoolSize</literal></entry>
                    <entry><function>Runtime.getRuntime().availableProcessors()</function></entry>
                    <entry>The number of threads to be used for bean loading
                        and deployment.</entry>
                </row>
                <row>
                    <entry><literal>threadPoolType</literal></entry>
                    <entry><function>FIXED</function></entry>
                    <entry>The type of the thread pool. Possible values are: <literal>FIXED</literal>, <literal>FIXED_TIMEOUT</literal>, <literal>NONE</literal>, <literal>SINGLE_THREAD</literal></entry>
                </row>
             </tbody>
             </tgroup>
          </table>
    </section>
   </section>

   <section>
      <title>Non-portable mode during application initialization</title>
      <para>
          By default the application initialization is performed in the portable mode which denotes specification-compliant behaviour. However it's also possible to enable the non-portable mode, in which some definition errors and deployment
          problems do not cause application initialization to abort. Currently the non-portable mode allows extension developers to call all the <literal>BeanManager</literal>'s methods before the <literal>AfterDeploymentValidation</literal>
          event is fired.
      </para>
      <para>
          Set the system property <literal>org.jboss.weld.nonPortableMode</literal> to <literal>true</literal> in order to enable the non-portable mode during initialization.
      </para>
      <note>
         <para>
            The main purpose of the non-portable mode is to support some legacy extensions, e.g. Seam Solder. It's highly recommended to use the portable mode whenever possible - non-portable mode may lead to unexpected behaviour during initialization process.
         </para>
      </note>
   </section>

   <section>
      <title>Mapping CDI contexts to HTTP requests</title>
      <para>
         By default, CDI contexts are activated at the beginning of an HTTP request processing and deactivated once the processing finishes. This may represent an unnecessary overhead in certain situations, for example static resource serving).
      </para>
      <para>
         Weld allows CDI context support to be mapped to a certain subset of requests only. A regular expression may be used for filtering HTTP requests that should have CDI contexts active during their processing.
      </para>
      <example>
        <title>context mapping configuration in web.xml</title>
      <programlisting role="XML"><![CDATA[<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

    <context-param>
        <param-name>org.jboss.weld.context.mapping</param-name>
        <param-value>.*\.html</param-value>
    </context-param>]]></programlisting>
      </example>
   </section>

<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
