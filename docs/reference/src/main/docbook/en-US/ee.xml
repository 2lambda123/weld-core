<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>
<chapter id="ee">
   <title>Java EE integration</title>

   <para>
      CDI is fully integrated into the Java EE environment. Beans have access to Java EE resources and JPA persistence
      contexts. They may be used in Unified EL expressions in JSF and JSP pages. They may even be injected into other
      platform components, such as servlets and message-driven Beans, which are not beans themselves.
   </para>

      <section>
         <title>Built-in beans</title>

         <para>
            In the Java EE environment, the container provides the following built-in beans, all with the qualifier
            <literal>@Default</literal>:
         </para>

         <itemizedlist>
            <listitem>
               <para>
                  the current JTA <literal>UserTransaction</literal>,
               </para>
            </listitem>
            <listitem>
               <para>
                  a <literal>Principal</literal> representing the current caller identity,
               </para>
            </listitem>
            <listitem>
               <para>
                  the default <ulink url="http://jcp.org/en/jsr/detail?id=303">Bean Validation</ulink>
                  <literal>ValidationFactory</literal>,
               </para>
            </listitem>
            <listitem>
               <para>
                  a <literal>Validator</literal> for the default <literal>ValidationFactory</literal>,
               </para>
            </listitem>
            <listitem>
               <para>
                  <literal>HttpServletRequest</literal>, <literal>HttpSession</literal> and <literal>ServletContext</literal>
               </para>
            </listitem>
         </itemizedlist>
         <note>
            <para>
                The <literal>FacesContext</literal> is not injectable. You can get at it by calling
               <literal>FacesContext.getCurrentInstance()</literal>. Alternatively you may define the following producer method:</para>
            <programlisting role="JAVA"><![CDATA[import javax.enterprise.inject.Produces;

class FacesContextProducer {
   @Produces @RequestScoped FacesContext getFacesContext() {
      return FacesContext.getCurrentInstance();
   }
}]]></programlisting>
         </note>

      </section>

   <section>
      <title>Injecting Java EE resources into a bean</title>

      <para>
         All managed beans may take advantage of Java EE component environment injection using <literal>@Resource</literal>,
         <literal>@EJB</literal>, <literal>@PersistenceContext</literal>, <literal>@PeristenceUnit</literal> and
         <literal>@WebServiceRef</literal>. We've already seen a couple of examples of this, though we didn't pay
         much attention at the time:
      </para>

      <programlisting role="JAVA"><![CDATA[@Transactional @Interceptor
public class TransactionInterceptor {
   @Resource UserTransaction transaction;

   @AroundInvoke public Object manageTransaction(InvocationContext ctx) throws Exception { ... }
}]]></programlisting>

      <programlisting role="JAVA"><![CDATA[@SessionScoped
public class Login implements Serializable {
   @Inject Credentials credentials;
   @PersistenceContext EntityManager userDatabase;
    ...
}]]></programlisting>

      <para>
         The Java EE <literal>@PostConstruct</literal> and <literal>@PreDestroy</literal> callbacks are also supported
         for all managed beans. The <literal>@PostConstruct</literal> method is called after <emphasis>all</emphasis>
         injection has been performed.
      </para>

      <para>
         Of course, we advise that component environment injection be used to define CDI resources, and that typesafe
         injection be used in application code.
      </para>

   </section>

   <section>
      <title>Calling a bean from a servlet</title>

      <para>
         It's easy to use a bean from a servlet in Java EE. Simply inject the bean using field or initializer method
         injection.
      </para>

      <programlisting role="JAVA"><![CDATA[public class Login extends HttpServlet {
   @Inject Credentials credentials;
   @Inject Login login;

   @Override
   public void service(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      credentials.setUsername(request.getParameter("username")):
      credentials.setPassword(request.getParameter("password")):
      login.login();
      if ( login.isLoggedIn() ) {
         response.sendRedirect("/home.jsp");
      }
      else {
         response.sendRedirect("/loginError.jsp");
      }
   }

}]]></programlisting>

      <para>
         Since instances of servlets are shared across all incoming threads, the bean client proxy takes care of routing
         method invocations from the servlet to the correct instances of <literal>Credentials</literal> and
         <literal>Login</literal> for the current request and HTTP session.
      </para>

   </section>

   <section>
      <title>Calling a bean from a message-driven bean</title>

      <para>
         CDI injection applies to all EJBs, even when they aren't CDI beans. In particular, you can use CDI
         injection in message-driven beans, which are by nature not contextual objects.
      </para>

      <para>You can even use CDI interceptor bindings for message-driven Beans.</para>

      <programlisting role="JAVA"><![CDATA[@Transactional @MessageDriven
public class ProcessOrder implements MessageListener {
   @Inject Inventory inventory;
   @PersistenceContext EntityManager em;

   public void onMessage(Message message) {
      ...
   }
}]]></programlisting>

      <para>
         Please note that there is no session or conversation context available when a message is delivered to a
         message-driven bean. Only <literal>@RequestScoped</literal> and <literal>@ApplicationScoped</literal>
         beans are available.
      </para>

      <para>
         But how about beans which <emphasis>send</emphasis> JMS messages?
      </para>

   </section>

   <section id="jms">
      <title>JMS endpoints</title>

      <para>
         Sending messages using JMS can be quite complex, because of the number of different objects you need to deal
         with. For queues we have <literal>Queue</literal>, <literal>QueueConnectionFactory</literal>,
         <literal>QueueConnection</literal>, <literal>QueueSession</literal> and <literal>QueueSender</literal>. For
         topics we have <literal>Topic</literal>, <literal>TopicConnectionFactory</literal>,
         <literal>TopicConnection</literal>, <literal>TopicSession</literal> and <literal>TopicPublisher</literal>. Each
         of these objects has its own lifecycle and threading model that we need to worry about.
      </para>

      <para>
         You can use producer fields and methods to prepare all of these resources for injection into a bean:
      </para>

      <programlisting role="JAVA"><![CDATA[import javax.jms.ConnectionFactory;
import javax.jms.Queue;

public class OrderResources {
   @Resource(name="jms/ConnectionFactory")
   private ConnectionFactory connectionFactory;

   @Resource(name="jms/OrderQueue")
   private Queue orderQueue;

   @Produces @OrderConnection
   public Connection createOrderConnection() throws JMSException {
    return connectionFactory.createConnection();
   }

   public void closeOrderConnection(@Disposes @OrderConnection Connection connection)
         throws JMSException {
      connection.close();
   }

   @Produces @OrderSession
   public Session createOrderSession(@OrderConnection Connection connection)
         throws JMSException {
      return connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
   }

   public void closeOrderSession(@Disposes @OrderSession Session session)
         throws JMSException {
      session.close();
   }

   @Produces @OrderMessageProducer
   public MessageProducer createOrderMessageProducer(@OrderSession Session session)
         throws JMSException {
      return session.createProducer(orderQueue);
   }

   public void closeOrderMessageProducer(@Disposes @OrderMessageProducer MessageProducer producer)
         throws JMSException {
      producer.close();
   }
}]]></programlisting>

      <para>
         In this example, we can just inject the prepared <literal>MessageProducer</literal>,
         <literal>Connection</literal> or <literal>QueueSession</literal>:
      </para>

      <programlisting role="JAVA"><![CDATA[@Inject Order order;
@Inject @OrderMessageProducer MessageProducer producer;
@Inject @OrderSession QueueSession orderSession;

public void sendMessage() {
   MapMessage msg = orderSession.createMapMessage();
   msg.setLong("orderId", order.getId());
   ...
   producer.send(msg);
}]]></programlisting>

      <!--
      <programlisting role="JAVA"><![CDATA[@Inject @StockPrices TopicPublisher pricePublisher;
@Inject @StockPrices TopicSession priceSession;

public void sendMessage(String price) {
   pricePublisher.send(priceSession.createTextMessage(price));
}]]></programlisting>
      -->

      <para>
         The lifecycle of the injected JMS objects is completely controlled by the container.
      </para>

   </section>

   <section id="packaging">
      <title>Packaging and deployment</title>
      <para>
         CDI doesn't define any special deployment archive. You can package CDI beans in jars, EJB jars or wars&mdash;any
         deployment location in the application classpath. However, the archive must be a "bean archive".
      </para>
      <para>
         Unlike CDI 1.0, the CDI 1.1 specification recognizes two types of bean archives. The type determines the way the container discovers CDI beans in the archive.
      </para>
      <note>
        <para>
            CDI 1.1 makes use of a new XSD file for beans.xml descriptor: <ulink url="http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd">http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd</ulink>
        </para>
      </note>
      <section>
            <title>Explicit bean archive</title>
            <para>
                An explicit bean archive is an archive which contains a <literal>beans.xml</literal> file:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        with a version number of 1.1 (or later), with the bean-discovery-mode of <literal>all</literal>, or,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        with no version number or that is an empty file (CDI 1.0 like).
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                It behaves just like a CDI 1.0 bean archive - i.e. Weld discovers each Java class, interface or enum in such an archive.
            </para>
            <note>
                <para>
                    The <literal>beans.xml</literal> file must be located at:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <literal>META-INF/beans.xml</literal> (for jar archives), or,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>WEB-INF/beans.xml</literal> or <literal>WEB-INF/classes/META-INF/beans.xml</literal> (for WAR archives).
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    You should never place a <literal>beans.xml</literal> file in both of the WEB-INF and the WEB-INF/classes/META-INF directories. Otherwise your application would not be portable.
                </para>
            </note>
      </section>

      <section>
            <title>Implicit bean archive</title>
            <para>
                An implicit bean archive is an archive which contains one or more bean classes with a <emphasis>bean defining annotation</emphasis>, or one or more session beans.
                It can also contain a <literal>beans.xml</literal> file with a version number of 1.1 (or later), with the bean-discovery-mode of <literal>annotated</literal>.
                Weld only discovers Java classes with a bean defining annotation within an implicit bean archive.
            </para>
            <note>
                <para>
                    Any scope type is a bean defining annotation. If you place a scope type on a bean class, then it has a bean defining annotation.
                     See <ulink url="http://docs.jboss.org/cdi/spec/1.1/cdi-spec.html#bean_defining_annotations">2.5. Bean defining annotations</ulink> to learn more.
                </para>
            </note>
      </section>

      <section>
            <title>What archive is not a bean archive</title>
            <para>
                Although quite obvious let's sum it up:
                <itemizedlist>
                    <listitem>
                        <para>
                            an archive which contains neither a <literal>beans.xml</literal> file nor any bean class with a <emphasis>bean defining annotation</emphasis>,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            an archive which contains a <literal>beans.xml</literal> file with the bean-discovery-mode of <literal>none</literal>.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <note>
                <para>
                    For compatibility with CDI 1.0, each Java EE product (WildFly, GlassFish, etc.) must contain an option to cause an archive to be ignored by the container when no <literal>beans.xml</literal> is present. Consult specific Java EE product documentation to learn more about such option.
                </para>
            </note>
      </section>

      <section>
        <title>Embeddable EJB container</title>
        <para>
            In an embeddable EJB container, beans may be deployed in any location in which EJBs may be deployed.
        </para>
      </section>

   </section>

<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
