<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>
<chapter id="gettingstarted">

   <title>Getting started with Weld</title>

   <para>
      Weld comes with a number of examples. We recommend you start with <literal>examples/jsf/numberguess</literal>
      and <literal>examples/jsf/translator</literal>. Numberguess is a web (war) example containing
      only non-transactional managed beans. This example can be run on a wide range of servers, including WildFly
      , GlassFish, Apache Tomcat, Jetty, Google App Engine, and any compliant Java EE 7 container.
      Translator is an enterprise (ear) example that contains session beans. This example
      must be run on WildFly 8 or better, GlassFish 4 or better, or any compliant Java EE 7 container.
   </para>

   <para>
      Both examples use JSF 2.2 as the web framework and, as such, can be found in the <literal>examples/jsf</literal>
      directory of the Weld distribution.
   </para>

   <section id="prerequisites">
      <title>Prerequisites</title>

      <para>
         To run the examples with the provided build scripts, you'll need the following:
      </para>

      <itemizedlist>
         <listitem>
            <para>the latest release of Weld, which contains the examples</para>
         </listitem>
         <listitem>
            <para>Maven 3, to build and deploy the examples</para>
         </listitem>
         <listitem>
            <para>a supported runtime environment (minimum versions shown)</para>
            <itemizedlist>
               <listitem>
                  <para>WildFly 8.0.0.Final,</para>
               </listitem>
               <listitem>
                  <para>GlassFish 4.0,</para>
               </listitem>
               <listitem>
                  <para>Apache Tomcat 6 or better (war example only), or</para>
               </listitem>
               <listitem>
                  <para>Jetty 6 or better (war example only)</para>
               </listitem>
            </itemizedlist>
         </listitem>
      </itemizedlist>

      <para>
         In the next few sections, you'll be using the Maven command (<literal>mvn</literal>) to invoke the Maven project file
         in each example to compile, assemble and deploy the example to WildFly and, for the war example, Apache Tomcat.
         You can also deploy the generated artifact (war or ear) to any other container that supports Java EE 7, such as
         GlassFish 4.
      </para>

      <para>The sections below cover the steps for deploying with Maven in detail. Let's start with WildFly.</para>

   </section>

   <section id="jbossas">
      <title>Deploying to WildFly</title>

      <para>
         To deploy the examples to WildFly, you'll need <ulink url="http://wildfly.org/downloads/">WildFly
         8.0.0.Final</ulink> or above. The good news is
         that there are no additional modifications you have to make to the server. It's ready to go!
      </para>

      <para>
         After you have downloaded WildFly, extract it. (We recommended renaming the folder to include the
         <literal>as</literal> qualifier so it's clear that it's the application server). You can move the extracted
         folder anywhere you like. Wherever it lays to rest, that's what we'll call the WildFly installation
         directory, or <literal>JBOSS_HOME</literal>.
      </para>

      <programlisting><![CDATA[$> unzip wildfly-8.0.0.Final.zip
$> mv wildfly-8.*/ wildfly-8]]></programlisting>

      <para>
         In order for the build scripts to know where to deploy the example, you have to tell them where to find your
         WildFly installation. Set the  <literal>JBOSS_HOME</literal> environment variable to point to the WildFly
         installation, e.g.:
      </para>

      <programlisting><![CDATA[$> export JBOSS_HOME=/path/to/wildfly-8]]></programlisting>

      <para>
         You're now ready to run your first example!
      </para>

      <para>
         Switch to the <literal>examples/jsf/numberguess</literal> directory and execute the Maven
         <literal>deploy</literal> target:
      </para>

     <programlisting><![CDATA[$> cd examples/jsf/numberguess
$> mvn jboss-as:run]]></programlisting>

      <note>
         <para>
            If you are using Eclipse, you should seriously consider installing the <ulink
            url="http://www.jboss.org/tools">JBoss Tools</ulink> add-ons, which include a wide variety of tooling for
            CDI and Java EE development, as well as an enhanced WildFly server view.
         </para>
      </note>

      <para>
         Wait a few seconds for the application to deploy (or the application server to start) and see if you can
         determine the most efficient approach to pinpoint the random number at the local URL <ulink
         url="http://localhost:8080/weld-numberguess">http://localhost:8080/weld-numberguess</ulink>.
      </para>

      <note>
         <para>
            The Maven WildFly plugin includes additional goals for WildFly to deploy and undeploy the archive.
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <literal>mvn wildfly:deploy</literal> - deploy the example to a running WildFly instance
               </para>
            </listitem>
            <listitem>
               <para>
                  <literal>mvn wildfly:undeploy</literal> - undeploy the example from a running WildFly instance
               </para>
            </listitem>
            <listitem>
               <para>
                  <literal>mvn wildfly:redeploy</literal> - redeploys the example
               </para>
            </listitem>
         </itemizedlist>

         <para>
            For more information on the WildFly Maven plugin see the <ulink url="https://docs.jboss.org/wildfly/plugins/maven/latest/">plugin documentation</ulink>.
         </para>
      </note>

      <para>
        You can also run functional tests to verify that the example works as expected. Run:
      </para>

      <programlisting><![CDATA[$> mvn verify -Darquillian=wildfly-managed-8]]></programlisting>

      <para>
        You should see the following output:
      </para>

      <programlisting><![CDATA[Tests run: 2, Failures: 0, Errors: 0, Skipped: 0]]></programlisting>

      <para>
         The second starter example, <literal>weld-translator</literal>, will translate your text into Latin. (Well,
         not really, but the stub is there for you to implement, at least. Good luck!) To try it out, switch to the
         translator example directory and execute the deploy target:
      </para>

      <programlisting><![CDATA[$> cd examples/jsf/translator/ear
$> mvn jboss-as:run]]></programlisting>

      <note>
         <para>
            The translator uses session beans, which are packaged in an EJB module within an ear. Java EE 7 allows
            session beans to be deployed in war modules, but that's a topic for a later chapter.
         </para>
      </note>

      <para>
         Again, wait a few seconds for the application to deploy (if you're really bored, read the log messages), and
         visit <ulink url="http://localhost:8080/weld-translator">http://localhost:8080/weld-translator</ulink> to begin
         pseudo-translating.
      </para>

      <para>
        Again, functional tests can be running by executing:
      </para>

      <programlisting><![CDATA[$> cd examples/jsf/translator/ftest
$> mvn verify -Darquillian=wildfly-managed-8]]></programlisting>

   </section>

   <section id="glassfish">
      <title>Deploying to GlassFish</title>

      <para>
         Deploying to GlassFish should be easy and familiar, right? After all, it's the Java EE 7 reference
         implementation and Weld is the CDI reference implementation, meaning Weld gets bundled with GlassFish.  So
         yes, it's all quite easy and familiar.
      </para>

      <para>
         To deploy the examples to GlassFish, you'll need a <ulink
         url="https://glassfish.java.net/download.html">GlassFish 4.0</ulink> release. Select the release
         that ends in either <literal>-unix.sh</literal> or <literal>-windows.exe</literal> depending on your platform.
         After the download is complete, execute the installer. On Linux/Unix, you'll need to first make the script
         executable.
      </para>

      <programlisting><![CDATA[$> chmod 755 glassfish-4.0-unix.sh
$> ./glassfish-4.0-unix.sh]]></programlisting>

      <para>
         On Windows you can just click on the executable. Follow the instructions in the installer. It will create a
         single domain named <literal>domain1</literal>. You'll use that domain to deploy the example. We recommend that
         you choose <literal>7070</literal> as the main HTTP port to avoid conflicts with a running instance of WildFly
         (or Apache Tomcat).
      </para>

      <para>
        Next, make sure the <literal>GLASSFISH_HOME</literal> environment variable is set to point to the GlassFish installation.
      </para>

      <para>
         Now switch to the example directory again and create a new GlassFish domain for the example.
      </para>

      <programlisting><![CDATA[$> cd examples/jsf/numberguess
$> mvn glassfish:create-domain]]></programlisting>

      <para>
        You are now ready to deploy the example by running:
      </para>

      <programlisting><![CDATA[$> mvn package glassfish:deploy]]></programlisting>

      <para>
        Once the command completes the application is available at <ulink url="http://localhost:7070/weld-numberguess">http://localhost:7070/weld-numberguess</ulink>
      </para>

      <para>
        The example is deployed using the <literal>maven-glassfish-plugin</literal>. For more information about the plugin
        see the <ulink url="http://maven-glassfish-plugin.java.net/">plugin documentation</ulink>
      </para>

      <para>
         There are alternative ways of,deploying applications to GlassFish either by using the <ulink url="http://localhost:4848">GlassFish Admin
         Console</ulink> or the <literal>asadmin</literal> command.
      </para>

      <para>
         The reason the same artifact can be deployed to both WildFly and GlassFish, without any modifications, is
         because all of the features being used are part of the standard platform. And what a capable platform it has
         become!
      </para>

   </section>

   <section id="tomcat">
      <title>Deploying to Apache Tomcat</title>

      <para>
         Servlet containers are not required to support Java EE services like CDI. However, you can use CDI in a
         servlet container like Tomcat by embedding a standalone CDI implementation such as Weld.</para>

      <para>
         Weld comes with a servlet listener which bootstraps the CDI environment, registers the <literal>BeanManager</literal>
         in JNDI and provides injection into servlets. Basically, it emulates some of the work done by the Java EE
         container. (But you don't get enterprise features such as session beans and container-managed transactions.)
      </para>

      <para>
         Let's give the Weld servlet extension a spin on Apache Tomcat. First, you'll need to download Tomcat 6.0.18 or
         later from <ulink url="http://tomcat.apache.org/download-60.cgi">tomcat.apache.org</ulink> and extract it.
      </para>

      <programlisting><![CDATA[$> unzip apache-tomcat-6.0.18.zip]]></programlisting>

      <para>
            The Maven plugin communicates with Tomcat over HTTP, so it doesn't care where you have installed Tomcat.
            However, the plugin configuration assumes you are running Tomcat in its default configuration, with a hostname
            of localhost and port <literal>8080</literal>. The <literal>readme.txt</literal> file in the example directory
            has information about how to modify the Maven settings to accommodate a different setup.
      </para>

      <para>
        To allow Maven to communicate with Tomcat over HTTP, edit the <literal>conf/tomcat-users.xml</literal> file in
        your Tomcat installation. For Tomcat 6 add the following line:
      </para>

      <programlisting role="XML"><![CDATA[<user username="admin" password="" roles="manager"/>]]></programlisting>
      
      <para>
        For Tomcat 7 and higher add the following line:
      </para>

      <programlisting role="XML"><![CDATA[<user username="admin" password="" roles="manager-script"/>]]></programlisting>

      <para>
        Next, start Tomcat. You can either start Tomcat from a Linux shell:
      </para>

      <programlisting><![CDATA[$> cd /path/to/apache-tomcat-6
$> ./bin/start.sh]]></programlisting>

      <para>
        a Windows command window:
      </para>

      <programlisting><![CDATA[$> cd c:\path\to\apache-tomcat-6\bin
$> start]]></programlisting>

      <para>
        or you can start the server using an IDE, like Eclipse.
      </para>

      <para>
        Now you're ready to deploy the numberguess example to Tomcat!
      </para>

      <para>
        Change to the <literal>examples/jsf/numberguess</literal> directory again and run the following Maven command:
      </para>

      <programlisting><![CDATA[$> cd examples/jsf/numberguess
$> mvn compile war:exploded tomcat:exploded -Ptomcat]]></programlisting>

       <para>
            Once the application is deployed, you can redeploy it using this command:
       </para>

      <programlisting><![CDATA[$> mvn tomcat:redeploy -Ptomcat]]></programlisting>

      <para>
         The <literal>-Ptomcat</literal> argument activates the <literal>tomcat</literal> profile defined in the Maven POM
         (<literal>pom.xml</literal>). Among other things, this profile activates the Tomcat plugin.
      </para>

      <para>
         Rather than shipping the container off to a standalone Tomcat installation, you can also execute the
         application in an embedded Tomcat 6 container:
      </para>

      <programlisting><![CDATA[$> mvn war:inplace tomcat6:run -Ptomcat]]></programlisting>

      <para>
         The advantage of using the embedded server is that changes to assets in <literal>src/main/webapp</literal> take effect
         immediately. If a change to a webapp configuration file is made, the application may automatically redeploy
         (depending on the plugin configuration). If you make a change to a classpath resource, you need to execute a
         build:
      </para>

      <programlisting><![CDATA[$> mvn compile war:inplace -Ptomcat]]></programlisting>

      <para>
         Finally, you can run the functional tests:
      </para>

      <programlisting><![CDATA[$> mvn verify -Darquillian=tomcat-embedded-6 -Ptomcat]]></programlisting>

      <para>
         There are several other Maven goals that you can use if you are hacking on the example, which are documented in
         the example's <literal>readme.txt</literal> file.
      </para>

   </section>

   <section id="jetty">
      <title>Deploying to Jetty</title>

      <!-- subsections? -->

      <para>
         Support for Jetty in the examples is a more recent addition. Since Jetty is traditionally used with Maven,
         there are no Ant targets. You must invoke the Maven build directly to deploy the examples to Jetty out of the
         box. Also, only the <literal>weld-numberguess</literal> example is configured for Jetty support at the time of
         writing.
      </para>

      <para>
         If you've read through the entire Tomcat section, then you're all ready to go. The Maven build parallels the
         embedded Tomcat deployment. If not, don't worry. We'll still go over everything that you need to know again
         in this section.
      </para>

      <para>
         The Maven POM (<literal>pom.xml</literal>) includes a profile named <literal>jetty</literal> that activates the
         Maven Jetty plugin, which you can use
         to start Jetty in embedded mode and deploy the application in place. You don't need anything else installed
         except to have the Maven command (<literal>mvn</literal>) on your path. The rest will be downloaded from the
         internet when the
         build is run.
      </para>

      <para>
         To run the <literal>weld-numberguess</literal> example on Jetty, switch to the example directory and execute
         the <literal>inplace</literal> goal of the Maven war plugin followed by the <literal>run</literal> goal of
         the Maven Jetty plugin with the <literal>jetty</literal> profile enabled, as follows:
      </para>

      <programlisting><![CDATA[$> cd examples/jsf/numberguess
$> mvn war:inplace jetty:run -Pjetty]]></programlisting>

      <para>
         The log output of Jetty will be shown in the console. Once Jetty reports that the application has deployed, you
         can access it at the following local URL: <ulink
         url="http://localhost:9090/weld-numberguess">http://localhost:9090/weld-numberguess</ulink>. The port is
         defined in the Maven Jetty plugin configuration within the <literal>jetty</literal> profile.
      </para>

      <para>
         Any changes to assets in <literal>src/main/webapp</literal> take effect immediately. If a change to a webapp
         configuration file is made, the application may automatically redeploy. The redeploy behavior can be fined-tuned
         in the plugin configuration. If you make a change to a classpath resource, you need to execute a build and the
         <literal>inplace</literal> goal of the Maven war plugin, again with the <literal>jetty</literal> profile enabled.
      </para>

      <programlisting><![CDATA[$> mvn compile war:inplace -Pjetty]]></programlisting>

      <para>
         The <literal>war:inplace</literal> goal copies the compiled classes and jars inside <literal>src/main/webapp</literal>,
         under <literal>WEB-INF/classes</literal> and <literal>WEB-INF/lib</literal>, respectively, mixing source and compiled
         files. However, the build does work around these temporary files by excluding them from the packaged war and cleaning
         them during the Maven clean phase.
      </para>

      <para>
         Now that you have gotten the starter applications deployed on the server of your choice, you probably want to
         know a little bit about how they actually work.
      </para>

   </section>

<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
